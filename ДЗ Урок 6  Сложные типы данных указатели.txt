1. Проанализируйте задания предыдущих уроков.
a. В каких случаях необходима была явная передача указателя в качестве входных параметров и возвращаемых результатов или в качестве приёмника в методах?

При организации ввода данных с посощью fmt.Scanln(&n)

fmt.Print("введите число членов последовательности Фибоначчи: \n")
	fmt.Scanln(&n)



b. В каких случаях мы фактически имеем дело с указателями при передаче параметров, хотя явно их не указываем?

ДЗ урок 4 сортировка. В функцию сортировки передается слайс, который является структурой ссылочного типа, содержащей указатель на адрес ячейки памяти, с которой начинается порождающий его массив. Т.е. в функцию сортировки данные передаются по ссылке.

ДЗ урок 5 расчет числа из последовательности Фибоначчи методом рекурсии.
При организации кеша необходимо было создать мапу для сохранения промежуточных результатов. Причем данная мапа является внешним объектом по отношению к функции, которая с ним работает, но эта функция изменяет эту мапу, поскольку мапа является тоже ссылочным типом, как слайс.
https://go.dev/play/p/oAgcFBAy7SU и соответственно функция работает не с копиями данных, переданных в нее, а с данными, расположенными по переданным в функцию адресам.

При организации замыкания аналогично происходит захват окружения через указатели, в т.ч. организованной для изоляции под оберткой мапы, которая являлась кешем для хранения промежуточных результатов. 

2. Для арифметического умножения и разыменования указателей в Go используется один и тот же символ — оператор (*). Как вы думаете, как компилятор Go понимает, в каких случаях в выражении имеется в виду умножение, а в каких — разыменование указателя?

Ответ: если тип операнда указывает на то, что это "указатель", т.е. там лежат не данные, а адрес, то компилятор Go понимает (т.к. в Go не поддерживаются арифметические операции с указателями.), что необходимо применить операцию разыменования "указателя", т.е. взятие значения по указателю (этому адресу). По синтаксису префиксная операция * означает только разыменование.
